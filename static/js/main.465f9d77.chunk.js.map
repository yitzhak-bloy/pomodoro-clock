{"version":3,"sources":["components/Session.jsx","components/Break.jsx","components/Timer.jsx","PomodoroClock.jsx","App.js","serviceWorker.js","index.js"],"names":["Session","sessionLength","handleClickDecrement","handleClickIncrement","className","id","onClick","Breack","breakLength","Timer","interval","minutes","seconds","handleClickStart","handleClickReset","timerLabel","accurateInterval","require","PomodoroClock","props","audioRef","React","createRef","handleClickSessionDecrement","state","setState","handleClickSessionIncrement","handleClickbreakDecrement","handleClickbreakIncrement","timer","current","play","handleTimer","start_stop","clear","pause","currentTime","handleClickStartStop","this","Break","ref","src","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.465f9d77.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Session.css';\r\n\r\n\r\nconst Session = ({ sessionLength, handleClickDecrement, handleClickIncrement }) => {\r\n  return (\r\n    <div className=\"session\">\r\n      <div id=\"session-label\">Session Length</div>\r\n      <button onClick={handleClickDecrement} id=\"session-decrement\" className='buttonLength'>&#8657;</button>\r\n      <div id=\"session-length\">{sessionLength}</div>\r\n      <button onClick={handleClickIncrement} id=\"session-increment\" className='buttonLength'>&#8659;</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Session;\r\n","import React from 'react';\r\nimport './Breack.css';\r\n\r\nfunction Breack({ breakLength, handleClickDecrement, handleClickIncrement }) {\r\n  return (\r\n    <div className=\"breack\">\r\n      <div id=\"break-label\">Break Length</div>\r\n      <button id=\"break-decrement\" className='buttonLength' onClick={handleClickDecrement}>&#8657;</button>\r\n      <div id=\"break-length\">{breakLength}</div>\r\n      <button id=\"break-increment\" className='buttonLength' onClick={handleClickIncrement}>&#8659;</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Breack;\r\n","import React from 'react';\r\nimport './Timer.css';\r\n\r\nfunction Timer({minutes, seconds, handleClickStart, handleClickReset, timerLabel}) {\r\n  return (  \r\n    <div className=\"timer\">\r\n      <div id=\"timer-label\" >{timerLabel}</div>\r\n      <div id=\"time-left\">{minutes < 10 ? 0 : ''}{minutes}:{seconds < 10 ? 0 : ''}{seconds}</div>\r\n      <button className='buttenTimer' id=\"start_stop\" onClick={handleClickStart} >start / stop</button>\r\n      <button className='buttenTimer' id=\"reset\" onClick={handleClickReset}>reset</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Timer;\r\n","import React, { Component } from 'react';\r\nimport './PomodoroClock.css';\r\n\r\nimport Session from './components/Session';\r\nimport Break from './components/Break';\r\nimport Timer from './components/Timer';\r\nconst accurateInterval = require('accurate-interval');\r\n\r\nlet interval;\r\n\r\nclass PomodoroClock extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      sessionLength: 25,\r\n      breakLength: 5,\r\n      minutes: 0,\r\n      seconds: 0,\r\n      start_stop: true,\r\n      timerLabel: 'session'\r\n    };\r\n  }\r\n\r\n  audioRef = React.createRef();\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      minutes: this.state.sessionLength\r\n    })\r\n  }\r\n\r\n  handleClickSessionDecrement = () => {\r\n    if (this.state.sessionLength < 60) {\r\n      this.setState ({\r\n        sessionLength: this.state.sessionLength + 1,\r\n        minutes: this.state.minutes + 1\r\n      })\r\n    }\r\n  }\r\n\r\n  handleClickSessionIncrement = () => {\r\n    if (this.state.sessionLength > 1) {\r\n      this.setState ({\r\n        sessionLength: this.state.sessionLength - 1,\r\n        minutes: this.state.minutes - 1\r\n      })\r\n    }\r\n  }\r\n\r\n  handleClickbreakDecrement = () => {\r\n    if (this.state.breakLength < 60 ) {\r\n      this.setState ({\r\n        breakLength: this.state.breakLength + 1\r\n      })\r\n    }\r\n  }\r\n\r\n  handleClickbreakIncrement = () => {\r\n    if (this.state.breakLength > 1) {\r\n      this.setState ({\r\n        breakLength: this.state.breakLength - 1\r\n      })\r\n    }\r\n  }\r\n\r\n  timer = () => {\r\n    if (!this.state.seconds && !this.state.minutes && this.state.timerLabel === 'session') {\r\n      this.setState ({\r\n        minutes: this.state.breakLength,\r\n        seconds: 0,\r\n        timerLabel: 'break'\r\n      })\r\n      this.audioRef.current.play();\r\n    } else if (!this.state.seconds && !this.state.minutes && this.state.timerLabel === 'break') {\r\n        this.setState ({\r\n          minutes: this.state.sessionLength,\r\n          seconds: 0,\r\n          timerLabel: 'session'\r\n        })\r\n        this.audioRef.current.play();\r\n    } else if (this.state.seconds) {\r\n        this.setState ({\r\n          seconds: this.state.seconds - 1\r\n        })\r\n    } else if (!this.state.seconds) {\r\n        this.setState ({\r\n          minutes: this.state.minutes - 1,\r\n          seconds: 59\r\n        })\r\n    }\r\n  }\r\n\r\n  handleTimer = () => {\r\n    if (this.state.start_stop) {\r\n      interval = accurateInterval(this.timer, 1000);\r\n    } else {\r\n      interval.clear();\r\n      this.audioRef.current.pause()\r\n      this.audioRef.current.currentTime = 0\r\n    }\r\n  }\r\n\r\n  handleClickStartStop = () => {\r\n    this.handleTimer()\r\n    this.setState ({\r\n      start_stop: !this.state.start_stop\r\n    })\r\n  }\r\n\r\n  handleClickReset = () => {\r\n    if (interval) {\r\n      interval.clear();\r\n      this.audioRef.current.pause()\r\n      this.audioRef.current.currentTime = 0\r\n    }\r\n    this.setState ({\r\n      sessionLength: 25,\r\n      breakLength: 5,\r\n      minutes: 25,\r\n      seconds: 0,\r\n      start_stop: true,\r\n      timerLabel: 'session'\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"PomodoroClock\">\r\n        <div className='sessionAndBreak'>\r\n          <div className='determineLength'>\r\n            <Session \r\n              handleClickDecrement={this.handleClickSessionDecrement} \r\n              handleClickIncrement={this.handleClickSessionIncrement} \r\n              sessionLength={this.state.sessionLength}\r\n            />\r\n          </div>\r\n          <div className='determineLength'>\r\n            <Break \r\n              handleClickDecrement={this.handleClickbreakDecrement} \r\n              handleClickIncrement={this.handleClickbreakIncrement} \r\n              breakLength={this.state.breakLength}\r\n            />\r\n          </div>\r\n        </div>\r\n        <Timer\r\n          minutes={this.state.minutes}\r\n          seconds={this.state.seconds}\r\n          handleClickStart={this.handleClickStartStop}\r\n          handleClickReset={this.handleClickReset}\r\n          timerLabel={this.state.timerLabel}\r\n        />\r\n        <audio \r\n          id=\"beep\" \r\n          ref={this.audioRef}\r\n          src={'https://actions.google.com/sounds/v1/alarms/alarm_clock.ogg'} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PomodoroClock;","import React from 'react';\nimport PomodoroClock from './PomodoroClock'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PomodoroClock />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}